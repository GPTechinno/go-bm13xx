package bm13xx

import (
	"bytes"
	"testing"

	"github.com/google/go-cmp/cmp"
)

func Test_crc5(t *testing.T) {
	type args struct {
		data []byte
	}
	tests := []struct {
		name string
		args args
		want byte
	}{
		{
			name: "SetChipAddress 0",
			args: args{data: []byte{0x40, 0x05, 0x00, 0x00}},
			want: 0x1C,
		},
		{
			name: "SetChipAddress 8",
			args: args{data: []byte{0x40, 0x05, 0x08, 0x00}},
			want: 0x07,
		},
		{
			name: "WriteRegister All",
			args: args{data: []byte{0x51, 0x09, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00}},
			want: 0x1C,
		},
		{
			name: "ReadRegister All ChipAddress",
			args: args{data: []byte{0x52, 0x05, 0x00, 0x00}},
			want: 0x0A,
		},
		{
			name: "ChainInactive All",
			args: args{data: []byte{0x53, 0x05, 0x00, 0x00}},
			want: 0x03,
		},
		{
			name: "Respond 1397 Chip0 ChipAddress",
			args: args{data: []byte{0x13, 0x97, 0x18, 0x00, 0x00, 0x00, 0x06}},
			want: 0x00,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := crc5(tt.args.data); got != tt.want {
				t.Errorf("crc5() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_crc16(t *testing.T) {
	type args struct {
		data []byte
	}
	tests := []struct {
		name string
		args args
		want uint16
	}{
		{
			name: "Work 1",
			args: args{
				data: []byte{0x21, 0x96, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x15, 0x9E, 0x07, 0x17, 0x75,
					0x32, 0x8E, 0x63, 0xA2, 0xB3, 0x6A, 0x70, 0xDE, 0x60, 0x4A, 0x09, 0xE9, 0x30, 0x1D, 0xE1,
					0x25, 0x6D, 0x7E, 0xB8, 0x0E, 0xA1, 0xE6, 0x43, 0x82, 0xDF, 0x61, 0x14, 0x15, 0x03, 0x96,
					0x6C, 0x18, 0x5F, 0x50, 0x2F, 0x55, 0x74, 0xD4, 0xBA, 0xAE, 0x2F, 0x3F, 0xC6, 0x02, 0xD9,
					0xCD, 0x3B, 0x9E, 0x39, 0xAD, 0x97, 0x9C, 0xFD, 0xFF, 0x3A, 0x40, 0x49, 0x4D, 0xB6, 0xD7,
					0x8D, 0xA4, 0x51, 0x34, 0x99, 0x29, 0xD1, 0xAD, 0x36, 0x66, 0x1D, 0xDF, 0xFF, 0xC1, 0xCC,
					0x89, 0x33, 0xEA, 0xF3, 0xE8, 0x3A, 0x91, 0x58, 0xA6, 0xD6, 0xFA, 0x02, 0x0D, 0xCF, 0x60,
					0xF8, 0xC1, 0x0E, 0x99, 0x36, 0xDE, 0x71, 0xDB, 0xD3, 0xF7, 0xD2, 0x86, 0xAF, 0xAD, 0x62,
					0x59, 0x3A, 0x8D, 0xA3, 0x28, 0xAF, 0xEC, 0x09, 0x6D, 0x86, 0xB9, 0x8E, 0x30, 0xE5, 0x79,
					0xAE, 0xA4, 0x35, 0xE1, 0x4B, 0xB5, 0xD7, 0x09, 0xCC, 0xE1, 0x74, 0x04, 0x3A, 0x7C, 0x2D,
				},
			},
			want: 0x1B5C,
		},
		{
			name: "Work 2",
			args: args{
				data: []byte{0x21, 0x96, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x15, 0x9E, 0x07, 0x17, 0x75,
					0x32, 0x8E, 0x63, 0x1F, 0x3B, 0x02, 0x48, 0x36, 0xCA, 0xF5, 0x13, 0x81, 0x95, 0xA8, 0x1A,
					0xE7, 0x75, 0x2A, 0x92, 0x31, 0x73, 0x9A, 0xE1, 0x20, 0xC4, 0xF7, 0x17, 0xAF, 0xAA, 0x15,
					0x73, 0xA1, 0x55, 0xC4, 0x99, 0x4D, 0x17, 0x44, 0xD5, 0xBC, 0xFA, 0x18, 0x7D, 0x0D, 0xA8,
					0x7A, 0x56, 0x57, 0x9B, 0x0F, 0x4F, 0x7E, 0x14, 0x91, 0x48, 0x2D, 0xFF, 0x0B, 0x65, 0xF9,
					0x54, 0xFC, 0xA6, 0x87, 0x3B, 0x1D, 0x75, 0x06, 0x16, 0x30, 0xB4, 0x42, 0xD8, 0xCD, 0x6B,
					0x70, 0xB2, 0xB0, 0xB5, 0xEA, 0xA0, 0xCB, 0x85, 0x8E, 0x1A, 0xFA, 0xCE, 0x3A, 0xC0, 0x5F,
					0x34, 0xCF, 0x57, 0x0E, 0x88, 0x91, 0xCA, 0x52, 0x1E, 0xD6, 0xCD, 0xD3, 0x8B, 0xB7, 0xFC,
					0x73, 0x62, 0xDC, 0x43, 0x7E, 0x59, 0xC8, 0x26, 0x71, 0x16, 0x61, 0xBA, 0xB4, 0xD6, 0x58,
					0x3A, 0xFC, 0x0E, 0xBF, 0x77, 0xB7, 0x25, 0x54, 0x05, 0x2A, 0x84, 0x6C, 0x4D, 0x27, 0xD6,
				},
			},
			want: 0x6CE7,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := crc16(tt.args.data); got != tt.want {
				t.Errorf("crc16() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestChain_SetChipAddr(t *testing.T) {
	type args struct {
		chipAddr byte
	}
	tests := []struct {
		name    string
		c       *Chain
		is139x  bool
		args    args
		wantErr bool
		buf     bytes.Buffer
		wantBuf []byte
	}{
		{
			name:   "chipAddr 0",
			is139x: true,
			args: args{
				chipAddr: 0,
			},
			wantErr: false,
			wantBuf: []byte{0x55, 0xAA, 0x40, 0x05, 0x00, 0x00, 0x1C},
		},
		{
			name:   "chipAddr 8",
			is139x: true,
			args: args{
				chipAddr: 8,
			},
			wantErr: false,
			wantBuf: []byte{0x55, 0xAA, 0x40, 0x05, 0x08, 0x00, 0x07},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.c = NewChain(&tt.buf, tt.is139x, 25000000)
			if err := tt.c.SetChipAddr(tt.args.chipAddr); (err != nil) != tt.wantErr {
				t.Errorf("Chain.SetChipAddr() error = %v, wantErr %v", err, tt.wantErr)
			}
			if !cmp.Equal(tt.buf.Bytes(), tt.wantBuf) {
				t.Errorf("Chain.SetChipAddr() buf = %v, wantBuf %v", tt.buf.Bytes(), tt.wantBuf)
			}
		})
	}
}

func TestChain_WriteRegister(t *testing.T) {
	type args struct {
		all      bool
		chipAddr byte
		regAddr  RegAddr
		regVal   uint32
	}
	tests := []struct {
		name    string
		c       *Chain
		is139x  bool
		args    args
		wantErr bool
		buf     bytes.Buffer
		wantBuf []byte
	}{
		{
			name:   "all Clock Order Control0 = 0x00000000",
			is139x: true,
			args: args{
				all:      true,
				chipAddr: 0,
				regAddr:  ClockOrderControl0,
				regVal:   0x00000000,
			},
			wantErr: false,
			wantBuf: []byte{0x55, 0xAA, 0x51, 0x09, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1C},
		},
		{
			name:   "all Ordered Clock Enable = 0x000000FF",
			is139x: true,
			args: args{
				all:      true,
				chipAddr: 0,
				regAddr:  OrderedClockEnable,
				regVal:   0x000000FF,
			},
			wantErr: false,
			wantBuf: []byte{0x55, 0xAA, 0x51, 0x09, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF, 0x13},
		},
		{
			name:   "all Ticket Mask = 0x000000FC",
			is139x: true,
			args: args{
				all:      true,
				chipAddr: 0,
				regAddr:  TicketMask,
				regVal:   0x000000FC,
			},
			wantErr: false,
			wantBuf: []byte{0x55, 0xAA, 0x51, 0x09, 0x00, 0x14, 0x00, 0x00, 0x00, 0xFC, 0x07},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.c = NewChain(&tt.buf, tt.is139x, 25000000)
			if err := tt.c.WriteRegister(tt.args.all, tt.args.chipAddr, tt.args.regAddr, tt.args.regVal); (err != nil) != tt.wantErr {
				t.Errorf("Chain.WriteRegister() error = %v, wantErr %v", err, tt.wantErr)
			}
			if !cmp.Equal(tt.buf.Bytes(), tt.wantBuf) {
				t.Errorf("Chain.WriteRegister() buf = %v, wantBuf %v", tt.buf.Bytes(), tt.wantBuf)
			}
		})
	}
}

func TestChain_ReadRegister(t *testing.T) {
	type args struct {
		all      bool
		chipAddr byte
		regAddr  RegAddr
	}
	tests := []struct {
		name    string
		c       *Chain
		is139x  bool
		args    args
		wantErr bool
		buf     bytes.Buffer
		wantBuf []byte
	}{
		{
			name:   "all Chip Address",
			is139x: true,
			args: args{
				all:      true,
				chipAddr: 0,
				regAddr:  ChipAddress,
			},
			wantErr: false,
			wantBuf: []byte{0x55, 0xAA, 0x52, 0x05, 0x00, 0x00, 0x0A},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.c = NewChain(&tt.buf, tt.is139x, 25000000)
			if err := tt.c.ReadRegister(tt.args.all, tt.args.chipAddr, tt.args.regAddr); (err != nil) != tt.wantErr {
				t.Errorf("Chain.ReadRegister() error = %v, wantErr %v", err, tt.wantErr)
			}
			if !cmp.Equal(tt.buf.Bytes(), tt.wantBuf) {
				t.Errorf("Chain.WriteRegister() buf = %v, wantBuf %v", tt.buf.Bytes(), tt.wantBuf)
			}
		})
	}
}

func TestChain_SendJob(t *testing.T) {
	type args struct {
		jobID         byte
		startingNonce uint32
		nBits         uint32
		nTime         uint32
		merkelRoot    uint32
		midstates     []Midstate
	}
	tests := []struct {
		name    string
		c       *Chain
		is139x  bool
		args    args
		wantErr bool
		buf     bytes.Buffer
		wantBuf []byte
	}{
		{
			name:   "Job 0",
			is139x: true,
			args: args{
				jobID:         0,
				startingNonce: 0x00000000,
				nBits:         0x159E0717,
				nTime:         0x75328E63,
				merkelRoot:    0xA2B36A70,
				midstates: []Midstate{
					{0xDE, 0x60, 0x4A, 0x09, 0xE9, 0x30, 0x1D, 0xE1, 0x25, 0x6D, 0x7E, 0xB8, 0x0E, 0xA1, 0xE6, 0x43, 0x82, 0xDF, 0x61, 0x14, 0x15, 0x03, 0x96, 0x6C, 0x18, 0x5F, 0x50, 0x2F, 0x55, 0x74, 0xD4, 0xBA},
					{0xAE, 0x2F, 0x3F, 0xC6, 0x02, 0xD9, 0xCD, 0x3B, 0x9E, 0x39, 0xAD, 0x97, 0x9C, 0xFD, 0xFF, 0x3A, 0x40, 0x49, 0x4D, 0xB6, 0xD7, 0x8D, 0xA4, 0x51, 0x34, 0x99, 0x29, 0xD1, 0xAD, 0x36, 0x66, 0x1D},
					{0xDF, 0xFF, 0xC1, 0xCC, 0x89, 0x33, 0xEA, 0xF3, 0xE8, 0x3A, 0x91, 0x58, 0xA6, 0xD6, 0xFA, 0x02, 0x0D, 0xCF, 0x60, 0xF8, 0xC1, 0x0E, 0x99, 0x36, 0xDE, 0x71, 0xDB, 0xD3, 0xF7, 0xD2, 0x86, 0xAF},
					{0xAD, 0x62, 0x59, 0x3A, 0x8D, 0xA3, 0x28, 0xAF, 0xEC, 0x09, 0x6D, 0x86, 0xB9, 0x8E, 0x30, 0xE5, 0x79, 0xAE, 0xA4, 0x35, 0xE1, 0x4B, 0xB5, 0xD7, 0x09, 0xCC, 0xE1, 0x74, 0x04, 0x3A, 0x7C, 0x2D},
				},
			},
			wantErr: false,
			wantBuf: []byte{
				0x55, 0xAA, 0x21, 0x96, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x15, 0x9E, 0x07, 0x17, 0x75, 0x32, 0x8E, 0x63, 0xA2, 0xB3, 0x6A, 0x70,
				0xDE, 0x60, 0x4A, 0x09, 0xE9, 0x30, 0x1D, 0xE1, 0x25, 0x6D, 0x7E, 0xB8, 0x0E, 0xA1, 0xE6, 0x43, 0x82, 0xDF, 0x61, 0x14, 0x15, 0x03, 0x96, 0x6C, 0x18, 0x5F, 0x50, 0x2F, 0x55, 0x74, 0xD4, 0xBA,
				0xAE, 0x2F, 0x3F, 0xC6, 0x02, 0xD9, 0xCD, 0x3B, 0x9E, 0x39, 0xAD, 0x97, 0x9C, 0xFD, 0xFF, 0x3A, 0x40, 0x49, 0x4D, 0xB6, 0xD7, 0x8D, 0xA4, 0x51, 0x34, 0x99, 0x29, 0xD1, 0xAD, 0x36, 0x66, 0x1D,
				0xDF, 0xFF, 0xC1, 0xCC, 0x89, 0x33, 0xEA, 0xF3, 0xE8, 0x3A, 0x91, 0x58, 0xA6, 0xD6, 0xFA, 0x02, 0x0D, 0xCF, 0x60, 0xF8, 0xC1, 0x0E, 0x99, 0x36, 0xDE, 0x71, 0xDB, 0xD3, 0xF7, 0xD2, 0x86, 0xAF,
				0xAD, 0x62, 0x59, 0x3A, 0x8D, 0xA3, 0x28, 0xAF, 0xEC, 0x09, 0x6D, 0x86, 0xB9, 0x8E, 0x30, 0xE5, 0x79, 0xAE, 0xA4, 0x35, 0xE1, 0x4B, 0xB5, 0xD7, 0x09, 0xCC, 0xE1, 0x74, 0x04, 0x3A, 0x7C, 0x2D,
				0x1B, 0x5C},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.c = NewChain(&tt.buf, tt.is139x, 25000000)
			if err := tt.c.SendJob(tt.args.jobID, tt.args.startingNonce, tt.args.nBits, tt.args.nTime, tt.args.merkelRoot, tt.args.midstates); (err != nil) != tt.wantErr {
				t.Errorf("Chain.SendJob() error = %v, wantErr %v", err, tt.wantErr)
			}
			if !cmp.Equal(tt.buf.Bytes(), tt.wantBuf) {
				t.Errorf("Chain.WriteRegister() buf = %v, wantBuf %v", tt.buf.Bytes(), tt.wantBuf)
			}
		})
	}
}
